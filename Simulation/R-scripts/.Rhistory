#     sentences are unlikely;
# END TESTS --------------------------
# Figure out the order of the model, let us know which it is, then simulate:
if (order==1){
cat("First Order Markov Model Simulation\n")
}
if (order==2){
cat("Second Order Markov Model Simulation\n")
}
new.text <- list()
# Creating each chunk of new text:
for (i in 1:length(nwords)){
# Set the precursor word (depending on order):
if (order==1){
word.0 <- set.precursor.1(precursor.word, random.precursor, text.vector, row.dictionary)
}
if (order==2){
word.0 <- set.precursor.2(precursor.word, random.precursor, text.vector, row.dictionary)
}
# Create a new chunk of text and add it to the list:
sentence <- new.sentence(x, nwords=nwords[i], word.0, row.dictionary, column.dictionary, order)
# If full.sentences==TRUE, cut off any half-sentences after the last ".", "?" or "!":
if (full.sentences==TRUE){
sentence <- curtail(sentence)
}
new.text[[i]] <- sentence
}
# if nwords is a scalar, simulate.1st.order returns a character vector, not a list:
if (length(nwords)==1){
new.text <- new.text[[1]]
}
return(new.text)
}
rain[[1]]
rain1[[1]]
simulate.text(rain1, 10)
simulate.text(rain1, 1, 10)
rain1[[2]]
rain1[[1]]
library(Rstem)
library(tau)
# Load the Heart of Darkness
hod <- readLines('http://www.gutenberg.org/cache/epub/526/pg526.txt')
hod <- tolower(hod)
hod <- gsub(pattern = '[!;.,?\"-]', replacement = '', x = hod)
hod <- strsplit(hod, ' ')
hod <- unlist(hod)
length(unique(hod))
# 6,874 unique words, numbers, and urls
hod.words <- unique(hod)
length(unique(wordStem(hod.words, "english")))
# Down to 5,290 unique words, numbers, and urls with the stemmer
hod.words <- unique(wordStem(hod.words, "english"))
length(as.vector(textcnt(hod.words, method="string", n = 2L)))
# 5306 unique bigrams
# 5315 unique trigrams <-- doesn't seem right'
example <- 'This; sentence, \"has ! commas -- and. Periods. And ? marks?'
nex <- gsub(pattern = '[!;.,?\"-]', replacement = '', x = example)
strsplit(nex, ' ')
head(hod)
test.words <- c(test.words, "more")
rain1 <- mm.generator(test.words, order=1)
rain1[[1]]
rain1[[2]]
simulate.text(rain1, 1, 5)
test.words
test.words[8] <-"More"
rain1 <- mm.generator(test.words, order=1)
simulate.text(rain1, 1, 5)
simulate.text(rain1, 1, 20)
simulate.text(rain1, 1, 20, random.precursor=TRUE)
simulate.text(rain1, 1, 20, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, 20, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, 20, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, 20, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(5,20), random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,15), random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,10, 10), full.sentences=TRUE random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,10, 10), full.sentences=TRUE, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,10, 10), full.sentences=TRUE, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,10, 10), full.sentences=TRUE, random.precursor=TRUE, text.vector=test.words)
simulate.text(rain1, 1, c(10,10, 10), full.sentences=TRUE, random.precursor=TRUE, text.vector=test.words)
hod[1:100]
part.1<-function(text="pg526.txt"){
library(Rstem)
library(plyr)
text<-readLines(text)
text<-paste(text[40:((length(text)-361))], collapse='\n') # removing parts of file which pertain to license. 40 and -361 correspond to the start/end points of the license document.
pat<-c("[[:alpha:]]*||\\.")
m <- gregexpr(pat, text, ignore.case = TRUE)
x <- regmatches(text, m)
x <- do.call(c, x)
m <- regexec(pat, x, ignore.case = TRUE)
words <- regmatches(x, m)
words[words==""]<-NULL # Removes empty strings
words.vector<-unlist(words) # Just converting list to vector
# This is the stemming part of the code - not sure if this is what was wanted as output.
final.words<-wordStem(words.vector, language="english")
return(final.words)
}
hod2<- part1("http://www.gutenberg.org/cache/epub/526/pg526.txt")
hod2<- part.1("http://www.gutenberg.org/cache/epub/526/pg526.txt")
install.packages("Rstem")
library(Rstem)
hod2<- part.1("http://www.gutenberg.org/cache/epub/526/pg526.txt")
head(hod2)
test.words
test.words <- c(test.words, "griping")
rain2 <- mm.generator(test.words,2)
simulate.text(rain2, 2, 10)
simulate.text(rain2, 2, 10, text.vector=test.words)
simulate.text(rain2, 2, 10, text.vector=test.words)
simulate.text(rain2, 2, 10, text.vector=test.words)
simulate.text(rain2, 2, 10, text.vector=test.words)
simulate.text(rain2, 2, 10, text.vector=test.words, full.sentences=TRUE)
test.words.0 <- test.words[1:7]
test.words.0
rain3 <- mm.generator(test.words,1)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=TRUE)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, precursor.word=".", text.vector=test.words, full.sentences=FALSE)
simulate.text(rain3, 1, 10, precursor.word=".", text.vector=test.words, full.sentences=FALSE)
rain3[[1]]
test.words.0
rain3 <- mm.generator(test.words.0,1)
simulate.text(rain3, 1, 10, random.precursor=TRUE, text.vector=test.words, full.sentences=TRUE)
simulate.text(rain3, 1, 10, precursor.word=".", text.vector=test.words, full.sentences=FALSE)
forest.test <- c("More", "griping", "from", "the", "disenchanted", "forest", ".", "More", "griping")
rain <- "Don't tell me not to live, Just sit and putter, Life's candy and the sun's A ball of butter. Don't bring around a cloud To rain on my parade! Don't tell me not to fly-- I've simply got to. If someone takes a spill, It's me and not you. Who told you you're allowed To rain on my parade! I'll march my band out, I'll beat my drum, And if I'm fanned out, Your turn at bat, sir. At least I didn't fake it. Hat, sir, I guess I didn't make it! But whether I'm the rose Of sheer perfection, Or freckle on the nose Of life's complexion, The cinder or the shiny apple of its eye, I gotta fly once, I gotta try once, Only can die once, right, sir? Ooh, life is juicy, Juicy, and you see I gotta have my bite, sir! Get ready for me, love, cause I'm a commer, I simply gotta march, My heart's a drummer. Don't bring around a cloud To rain on my parade! I'm gonna live and live now, Get what I want--I know how, One roll for the whole show bang, One throw, that bell will go clang, Eye on the target and wham One shot, one gun shot, and BAM Hey, Mister Armstein, Here I am! I'll march my band out, I will beat my drum, And if I'm fanned out, Your turn at bat, sir, At least I didn't fake it. Hat, sir, I guess I didn't make it. Get ready for me, love, 'cause I'm a commer, I simply gotta march, My heart's a drummer. Nobody, no, nobody Is gonna rain on my parade!"
rain.test <- unlist(strsplit(rain, sep=" "))
rain.test <- unlist(strsplit(rain, split=" "))
forest.test <- c("More", "griping", "from", "the", "disenchanted", "forest", ".", "More", "griping")
rain <- "Don't tell me not to live, Just sit and putter, Life's candy and the sun's A ball of butter. Don't bring around a cloud To rain on my parade! Don't tell me not to fly-- I've simply got to. If someone takes a spill, It's me and not you. Who told you you're allowed To rain on my parade! I'll march my band out, I'll beat my drum, And if I'm fanned out, Your turn at bat, sir. At least I didn't fake it. Hat, sir, I guess I didn't make it! But whether I'm the rose Of sheer perfection, Or freckle on the nose Of life's complexion, The cinder or the shiny apple of its eye, I gotta fly once, I gotta try once, Only can die once, right, sir? Ooh, life is juicy, Juicy, and you see I gotta have my bite, sir! Get ready for me, love, cause I'm a commer, I simply gotta march, My heart's a drummer. Don't bring around a cloud To rain on my parade! I'm gonna live and live now, Get what I want--I know how, One roll for the whole show bang, One throw, that bell will go clang, Eye on the target and wham One shot, one gun shot, and BAM Hey, Mister Armstein, Here I am! I'll march my band out, I will beat my drum, And if I'm fanned out, Your turn at bat, sir, At least I didn't fake it. Hat, sir, I guess I didn't make it. Get ready for me, love, 'cause I'm a commer, I simply gotta march, My heart's a drummer. Nobody, no, nobody Is gonna rain on my parade!"
rain.test <- unlist(strsplit(rain, split=" "))
forest.object.1 <- mm.generator(forest.test, 1)
forest.object.2 <- mm.generator(forest.test, 2)
rain.object.1 <- mm.generator(rain.test, 1)
rain.object.2 <- mm.generator(rain.test, 2)
simulate.text(forest.object.1, order=1, nwords=12, precursor.word=".", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(forest.object.1, order=1, nwords=12, precursor.word=".", random.precursor=TRUE,
text.vector=forest.test, full.sentences=FALSE)
simulate.text(forest.object.1, order=1, nwords=12, precursor.word=".", random.precursor=TRUE,
simulate.text(forest.object.1, order=1, nwords=c(5,10, 15), precursor.word=".",
random.precursor=TRUE, text.vector=forest.test, full.sentences=TRUE)
)
simulate.text(forest.object.1, order=1, nwords=12, precursor.word=".", random.precursor=TRUE,
text.vector=forest.test, full.sentences=FALSE)
simulate.text(forest.object.1, order=1, nwords=c(5,10, 15), precursor.word=".",
random.precursor=TRUE, text.vector=forest.test, full.sentences=TRUE)
simulate.text(forest.object.2, order=2, nwords=12, precursor.word=".", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(forest.object.2, order=2, nwords=12, precursor.word=".", random.precursor=FALSE,
text.vector=forest.test, full.sentences=FALSE)
simulate.text(forest.object.2, order=2, nwords=12, precursor.word=c("from", "the"),
random.precursor=FALSE, text.vector=NULL, full.sentences=FALSE)
simulate.text(forest.object.2, order=2, nwords=12, precursor.word=".", random.precursor=TRUE,
text.vector=forest.test, full.sentences=FALSE)
simulate.text(forest.object.2, order=2, nwords=c(5,10, 15), precursor.word=".",
random.precursor=TRUE, text.vector=forest.test, full.sentences=TRUE)
simulate.text(rain.object.1, order=1, nwords=12, precursor.word="Don't", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.1, order=1, nwords=12, precursor.word="Don't", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.1, order=1, nwords=12, precursor.word="Don't", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.2, order=2, nwords=12, precursor.word=c("Don't","tell"),
random.precursor=FALSE, text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.2, order=2, nwords=12, precursor.word=c("Don't","tell"),
random.precursor=FALSE, text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.1, order=1, nwords=c(12, 7, 5), precursor.word="Don't", random.precursor=FALSE,
text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.1, order=1, nwords=12, precursor.word="Don't", random.precursor=TRUE,
text.vector=rain.test, full.sentences=FALSE)
simulate.text(rain.object.2, order=2, nwords=12, precursor.word=c("Don't","tell"),
random.precursor=FALSE, text.vector=NULL, full.sentences=FALSE)
simulate.text(rain.object.2, order=2, nwords=12, precursor.word="Don't", random.precursor=TRUE,
text.vector=rain.test, full.sentences=FALSE)
x <- rt(10,5)
?rt
?vapply
x <- rt(10,5)
y <- rt(20,5,1)
boxplot(x,y)
X <- c(x,y)
Z <- c(rep(1,10),rep(0,20))
wilcox.test(X~Z,exact=TRUE,conf.int=TRUE)
U <- function(Z) sum(rank(X)[Z==1]) # test statistic: sum of ranks
T <- vapply(1:100000, function(i) U(sample(Z)),1) # 100,000 random Ts
t <- U(Z)-median(T)
T <- T-median(T)
mean(T>=abs(t)) +mean( T<= -abs(t)) # 2-sided p-value
LTTdata <- matrix(c(4,0,0,4),2,2)
rownames(LTTdata) <- c('M','T')
colnames(LTTdata) <- c('m','t')
fisher.test(LTTdata,alternative='greater')
LTTdata[1,1] <- 3
LTTdata[1,2] <- 1
LTTdata[2,1] <- 1
LTTdata[2,2] <- 3
fisher.test(LTTdata,alternative='greater')
dat <- read.csv('http://www.andrew.cmu.edu/~acsales/hiring2.csv')
head(dat)
library(RItools)
xBalance(scarce~dsthlm+dgbg+dlandet+min+kvinna+svman+doverutb+sommarjobb+utlgymn+komp+varme+cult+fotboll+basket+lopning+simning+golf+tennis,data=dat,report=c('std.diffs','z.scores','chisquare.test'))
?xbalance
?xBalance
View(dat)
View(dat)
unique(dat$callback)
names(callback)
names(dat)
scarceData <- with(dat,table(scarce,callback))
fisher.test(scarceData)
attEff <- function(a){
newDat <- scarceData
newDat[1,1] <- newDat[1,1]+a
newDat[1,2] <- newDat[1,2]-a
newDat[2,1] <- newDat[2,1]-a
newDat[2,2] <- newDat[2,2]+a
if(any(newDat<0)) stop('not possible')
fisher.test(newDat)$p.value
}
attEff
pValues <- vapply(seq(-402,1000),attEff,1)
pValues
View(dat)
View(dat)
scarceData <- with(dat,table(scarce,callback))
unData <- with(dat,table(nuarblos,callback))
fisher.test(unData)
unData
?with
fisher.test(unData[c(1,4),])
fisher.test(unData[c(1,2),])
fisher.test(unData[c(1,3),])
unData
unData <- with(dat,table(parbetslos,callback))
fisher.test(unData)
unData
1578/4981
505/1402
ls()
library('RPostgreSQL')
install.packages('RPostgreSQL')
library('RPostgreSQL')
library('RPostgreSQL')
library('RPostgreSQL')
drv <- dbDriver('RPostgreSQL')
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv,
host = "dssgsummer2014postgres.c5faqozfo86k.us-west-2.rds.amazonaws.com",
dbname = "training_2015",
user = "silver",
password = "silver")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_5000")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_5000")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_5000")
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv,
host = "dssgsummer2014postgres.c5faqozfo86k.us-west-2.rds.amazonaws.com",
dbname = "training_2015",
user = "silver",
password = "silver")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_5000")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_50000")
data[,'SSA'] <- NULL
head(data)
View(data)
names(data)
head(data[,"INSPECTION CATEGORY"])
unique(data[,"INSPECTION CATEGORY"])
table(data[,"INSPECTION CATEGORY"])
table(data[,"VIOLATION CODE"])
head(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))
head(data[data[,"VIOLATION CODE"] %in% head(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)),"VIOLATION DESCRIPTION"])
data[,"VIOLATION CODE"] %in% head(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))
which(data[,"VIOLATION CODE"] %in% head(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"])), decreasing=TRUE))),"VIOLATION DESCRIPTION"])
head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))
)
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))),"VIOLATION DESCRIPTION"])
which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))),"VIOLATION DESCRIPTION"])
head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))))
head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))
which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))))
data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))),"VIOLATION DESCRIPTION"]
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))),"VIOLATION DESCRIPTION"])
names(data)
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))),"VIOLATION INSPECTOR COMMENTS"])
head(data[which(data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)))),"VIOLATION STATUS"])
head(data[which((data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"])&(data[,"VIOLATION STATUS"]="FAILED")), decreasing=TRUE)))),"VIOLATION INSPECTOR COMMENTS"])
head(data[which((data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"])&(data[,"VIOLATION STATUS"]=="FAILED")), decreasing=TRUE)))),"VIOLATION INSPECTOR COMMENTS"])
head(data[((data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"])&(data[,"VIOLATION STATUS"]=="FAILED")), decreasing=TRUE)))),"VIOLATION INSPECTOR COMMENTS"])
head(data[((data[,"VIOLATION CODE"] %in% head(names(sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))))&(data[,"VIOLATION STATUS"]=="FAILED"),"VIOLATION INSPECTOR COMMENTS"])
names(data)
unique(data[,"DEPARTMENT BUREAU"])
unique(data[,"INSPECTION CATEGORY"])
unique(data[,"INSPECTION STATUS"])
table(data[,"VIOLATION CODE"])
violationsort <- sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE))
violationsort <- sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)
head(violationsort)
commviol <- data[,"VIOLATION CODE"] %in% violationsort[1:10]
commonviol <- data[,"VIOLATION CODE"] %in% violationsort[1:10]
head(data[commonviol,])
sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)
violationsort[1:10]
names(violationsort[1:10])
commonviol <- data[,"VIOLATION CODE"] %in% names(violationsort[1:10])
head(data[commonviol,])
View(head(data[commonviol,]))
View(data[commonviol[1:20],])
View(data[commonviol[:20],])
View(data[commonviol[1:20],])
View(head(data[commonviol,]))
barplot(table(data[,"VIOLATION CODE"]))
barplot(sort(table(data[,"VIOLATION CODE"])), decreasing=TRUE)
names(data)
unique(data[,"PROPERTY GROUP"])
names(data)
unique(data[,"VIOLATION ORDINANCE"])
violationsort <- sort(table(data[,"VIOLATION CODE"]), decreasing=TRUE)
commonviol <- data[,"VIOLATION CODE"] %in% names(violationsort[1:10])
commonviol <- data[,"VIOLATION CODE"] %in% names(violationsort[1:40])
commvioldata <- data[commonviol,]
names(data)
unique(commvioldata[,"VIOLATION DESCRIPTION"])
sort(table(commvioldata[,"VIOLATION DESCRIPTION"]), decreasing=TRUE)
type(data)
typeof(data)
sapply(data, class)
sapply(data, typeof)
sapply(data, class)
head(data[, "LOCATION"])
head(data[, "LONGITUDE"])
table(data[, "VIOLATION STATUS"])
View(table(data[, "VIOLATION STATUS"]))
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_50000")
View(table(data[, "VIOLATION STATUS"]))
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv,
host = "dssgsummer2014postgres.c5faqozfo86k.us-west-2.rds.amazonaws.com",
dbname = "training_2015",
user = "silver",
password = "silver")
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_50000")
View(table(data[, "VIOLATION STATUS"]))
data <- dbGetQuery(con, "SELECT * FROM lizziesilver.building_violations_sample_50000")
View(table(data[, "VIOLATION STATUS"]))
View(table(data[, "INSPECTION STATUS"]))
hist(data[,"LONGITUDE"])
plot(data[, c("LATITUDE", "LONGITUDE")])
c(1,2,3)
plot(data[, c("LATITUDE", "LONGITUDE")], cex=.1)
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1)
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1, color=data[,"INSPECTION STATUS"])
?PLOT
?plot
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1, col=data[,"INSPECTION STATUS"])
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1, col=as.factor(data[,"INSPECTION STATUS"]))
?plot
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1, col=as.factor(data[,"INSPECTION STATUS"]))
head(data[, "VIOLATION DATE"])
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1,
col=as.numeric(as.factor(data[,"INSPECTION CATEGORY"])))
legend(legend = c("complaint", "periodic", "permit", "registration"), 'topright',names(data$"INSPECTION CATEGORY") ,
lty=1, col=c(1, 2, 3, 4), bty='n', cex=.75)
unique(commvioldata[,"VIOLATION DESCRIPTION"])
View(unique(commvioldata[,"VIOLATION DESCRIPTION"]))
View(unique(commvioldata[,"VIOLATION DESCRIPTION"]))
table(commvioldata[,"VIOLATION DESCRIPTION"]))
table(commvioldata[,"VIOLATION DESCRIPTION"])
View(table(commvioldata[,"VIOLATION DESCRIPTION"]))
View(sort(table(commvioldata[,"VIOLATION DESCRIPTION"])), decreasing=TRUE)
View(sort(table(commvioldata[,"VIOLATION DESCRIPTION"]), decreasing=TRUE))
commonviol <- data[,"VIOLATION CODE"] %in% names(violationsort[1:100])
commvioldata <- data[commonviol,]
View(sort(table(commvioldata[,"VIOLATION DESCRIPTION"]), decreasing=TRUE))
# plot violations by latitude and longitude, color by inspection category
plot(data[, c("LONGITUDE", "LATITUDE")], cex=.1,
col=as.numeric(as.factor(data[,"INSPECTION CATEGORY"])))
# legend for inspection category
legend(legend = c("complaint", "periodic", "permit", "registration"), 'topright',names(data$"INSPECTION CATEGORY") ,
lty=1, col=c(1, 2, 3, 4), bty='n', cex=.75)
summarize(data)
summarise(data)
summary(data)
hist(data[,"VIOLATION DATE"])
hist(data[,"VIOLATION DATE"], breaks=30)
hist(data[,"VIOLATION DATE"], breaks=100)
hist(data[,"VIOLATION DATE"], breaks=200)
hist(data[,"VIOLATION DATE"], breaks=365)
hist(data[,"VIOLATION DATE"], breaks=36)
unique(data[,"DEPARTMENT CODE"])
names(data)
unique(data[,"DEPARTMENT BUREAU"])
head(data[data$"DEPARTMENT BUREAU"=="IRON", "VIOLATION DESCRIPTION"])
data[data$"DEPARTMENT BUREAU"=="ELEVATOR", "VIOLATION DESCRIPTION"]
head(data[data$"VIOLATION DESCRIPTION"=="OPEN TYPE VIOLATION", "INSPECTOR COMMENTS"])
names(data)
head(data[data$"VIOLATION DESCRIPTION"=="OPEN TYPE VIOLATION", "VIOLATION INSPECTOR COMMENTS"])
head(data[data$"VIOLATION DESCRIPTION"=="OPEN TYPE VIOLATION", "VIOLATION STATUS"])
sum(is.na(data[,"VIOLATION STATUS"]))
head(is.na(data[,"VIOLATION STATUS"]))
head(data$"VIOLATION DESCRIPTION"=="OPEN TYPE VIOLATION")
head(which(data$"VIOLATION DESCRIPTION"=="OPEN TYPE VIOLATION"))
head(data[data[,"VIOLATION DESCRIPTION"]=="OPEN TYPE VIOLATION", "VIOLATION STATUS"])
unique(data[data[,"VIOLATION DESCRIPTION"]=="OPEN TYPE VIOLATION", "VIOLATION STATUS"])
names(data)
unique(data[data[,"VIOLATION DESCRIPTION"]=="OPEN TYPE VIOLATION", "INSPECTION STATUS"])
sum(is.na(data[data[,"VIOLATION DESCRIPTION"]=="OPEN TYPE VIOLATION", "INSPECTION STATUS"]))
unique(data[data[,"VIOLATION DESCRIPTION"]=="OPEN TYPE VIOLATION", "VIOLATION CODE"])
library(pcalg)
?rdag
rdag = r.gauss.pardag(5, prob=0.2)
plot(rdag)
install.packages(Rgraphviz)
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
plot(rdag)
rdag.cov.mat(target=c(), ivent.var=c())
rdag$cov.mat(target=c(), ivent.var=c())
pc.fit <- pc(suffStat = list(C = covmat, n = 100),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
rdag$nodes()
nodes(rdag)
rdag$nodes
rdag@nodes
rdag$.nodes
pc.fit <- pc(suffStat = list(C = covmat, n = 100),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
covmat = rdag$cov.mat(target=c(), ivent.var=c())
pc.fit <- pc(suffStat = list(C = covmat, n = 100),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
plot(pc.fit)
plot(rdag)
plot(rdag)
plot(pc.fit)
plot(pc.fit)
pc.fit <- pc(suffStat = list(C = covmat, n = 1000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
plot(pc.fit)
plot(rdag)
rdag$.nodes
covmat
plot(rdag)
plot(pc.fit)
# edge comparison with original graph
plot(pc.fit)
pc.fit <- pc(suffStat = list(C = covmat, n = 10000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
# edge comparison with original graph
plot(pc.fit)
plot(rdag)
ls()
data("gmG")
library(pcalg)
data("gmG")
suffStat <- list(C = cor(gmG$x), n = nrow(gmG$x))
pc.gmG <- pc(suffStat, indepTest = gaussCItest, p = ncol(gmG$x), alpha = 0.01)
par(mfrow = c(1,2))
plot(gmG$g, main = "") ; plot (pc.gmG, main = "")
idaFast(1, c(4,5,6), cov(gmG$x), pc.gmG@graph)
plot(gmG$g, main = "") ; plot (pc.gmG, main = "")
# Estimate size of causal effects using IDA
library(pcalg)
rdag = r.gauss.pardag(5, prob=0.2)
plot(rdag)
par(mfrow = c(1,1))
plot(rdag)
covmat = rdag$cov.mat(target=c(), ivent.var=c())
covmat
pc.fit <- pc(suffStat = list(C = covmat, n = 10000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
pc.fit <- pc(suffStat = list(C = covmat, n = 100000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = rdag$.nodes, verbose = TRUE)
pc.fit <- pc(suffStat = list(C = covmat, n = 100000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.05, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
plot(pc.fit)
pc.fit <- pc(suffStat = list(C = covmat, n = 1000),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.05, labels = rdag$.nodes, verbose = TRUE)
plot(pc.fit)
plot(rdag)
covmat
data("gmG")
suffStat <- list(C = cor(gmG$x), n = nrow(gmG$x))
par(mfrow = c(1,1))
plot(gmG$g, main = "") ; plot (pc.gmG, main = "")
par(mfrow = c(1,2))
plot(gmG$g, main = "") ; plot (pc.gmG, main = "")
idaFast(1, c(4,5,6), cov(gmG$x), pc.gmG@graph)
idaFast(2, c(4,5,6), cov(gmG$x), pc.gmG@graph)
